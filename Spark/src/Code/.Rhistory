zi <- rnorm(n, 0, 1)
B_vec
Cp_vec
# Calcular alpha e custos fisiológicos
alpha_vals <- alpha_fun(theta, zi)
cf_vals <- Cf(alpha_vals, Cp_vec)
alpha_vals
cf_vals
alpha_vals
# Colocar no formato longo para ggplot
alpha_df <- as.data.frame(alpha_vals) %>%
mutate(t = 1:nrow(.)) %>%
pivot_longer(cols = starts_with("sp"), names_to = "especie", values_to = "alpha")
# Colocar no formato longo para ggplot
alpha_df <- as.data.frame(alpha_vals) %>%
mutate(t = 1:nrow(.)) %>%
pivot_longer(cols = starts_with("sp"), names_to = "especie", values_to = "alpha")
library(tidyverse)
# Calcular alpha e custos fisiológicos
alpha_vals <- alpha_fun(theta, zi)
cf_vals <- Cf(alpha_vals, Cp_vec)
# Colocar no formato longo para ggplot
alpha_df <- as.data.frame(alpha_vals) %>%
mutate(t = 1:nrow(.)) %>%
pivot_longer(cols = starts_with("sp"), names_to = "especie", values_to = "alpha")
library(tidyverse)
library(tidyverse)
#----------------------
# Inputing or creating network
network <- function(N, conectancia) {
A <- matrix(rbinom(N*N, 1, conectancia), nrow = N, ncol = N)
diag(A) <- 0
return(A)
}
#----------------------
# Environmental condition (all times t values)
environment <- function(A_min, A_max, w_min, w_max, t_max = 100){
t <- seq(1, t_max, by = 1)
A <- runif(1, A_min, A_max)
w <- runif(1, w_min, w_max)
amplitude <- A / 2
frequency <- (1 + sin(2 * pi * w * t))
theta <- amplitude * frequency
return(theta)
}
#----------------------
# Alpha (theta - zi)
alpha_fun <- function(theta, zi) {
t_max <- length(theta)
n <- length(zi)
result <- matrix(NA, nrow = t_max, ncol = n)
for (time in 1:t_max) {
result[time, ] <- (theta[time] - zi)
}
colnames(result) <- paste0("sp", 1:n)
rownames(result) <- paste0("t", 1:t_max)
return(abs(result))
}
#----------------------
# Physiological cost (Cf is just to distinguish from Cp - fisiologico / physiological )
Cf <- function(alpha, Cp){
t_max = nrow(alpha)
n <- length(Cp)
physio <- matrix(NA, nrow = t_max, ncol = n)
for (time in 1:t_max) {
physio[time, ] <- (alpha[time, ] * Cp)
}
colnames(physio) <- paste0("sp", 1:n)
rownames(physio) <- paste0("t", 1:t_max)
return(physio)
}
#----------------------
# Simulating dinamics
simulation <- function(A, B_vec, Ce_vec, Cp_vec, zi, theta, n_steps = 100){
n <- nrow(A)
t_max <- length(theta)
# Alpha and physiological costs pre-calculated for all times t
alpha <- alpha_fun(theta, zi)
physio_all <- Cf(alpha, Cp_vec)
# Inicial state: all species present
state <- rep(1, n)
# Matrix to store history of states (states changes trhough time)
state_history <- matrix(NA, nrow = min(n_steps, t_max), ncol = n)
colnames(state_history) <- paste0("sp", 1:n)
state_history[1, ] <- state
for (t in 2:min(n_steps, t_max)) {
# Filtering A Matriz for just active species (1)
active_species <- which(state == 1)
# Actualizating costs and benefit matrices (C_mat & B_mat) considering just existing interactions  with active species
B_mat <- matrix(0, n, n)
C_mat <- matrix(0, n, n)
for (i in active_species) {
partners <- which(A[i, ] == 1 & state == 1)
B_mat[i, partners] <- B_vec[partners]
C_mat[i, partners] <- Ce_vec[partners]
}
# Especialization: benefits saturation
sum_b <- rowSums(B_mat)
B_max <- max(B_vec)
B_final <- ifelse(sum_b > B_max, B_max, sum_b)
# Calculating netbenefits NB: benefits - (ecological costs + B4hysiological costs)
C_total <- rowSums(C_mat) + physio_all[t, ]
nb <- B_final - C_total
# State actualization: species turns active if NB > 0
new_state <- ifelse(nb > 0, 1, 0)
# **Store the hystory of species states on the matrix**
state_history[t, ] <- new_state
# Stop itaration condition: stable state when species stop to change state
if (all(new_state == state)) break
state <- new_state
}
# FInal active interactions
A_active <- A * (state %o% state) #outer product of states in A_ij
# Final Metrics
prop_active_species <- sum(state) / n
prop_remaining_interactions <- sum(A_active) / sum(A)
return(list(
state_history = state_history[1:t, , drop = FALSE],
final_state = state,
prop_active_species = prop_active_species,
prop_remaining_interactions = prop_remaining_interactions
))
}
#----------------------
# Simulation example
set.seed(123)
# Calcular alpha e custos fisiológicos
alpha_vals <- alpha_fun(theta, zi)
library(tidyverse)
# Calcular alpha e custos fisiológicos
alpha_vals <- alpha_fun(theta, zi)
#----------------------
# Simulation example
set.seed(123)
A <- network(50, 0.3)
diag(A) <- 0
n <- nrow(A)
B_vec <- rlnorm(n, 10, 5)
Ce_vec <- rlnorm(n, 10, 5)
Cp_vec <- rlnorm(n, 1.5, 1)
zi <- rnorm(n, 0, 1)
theta <- environment(0.01, 0.1, 0.01, 0.1, t_max = 100)
resultado <- simulation(A, B_vec, Ce_vec, Cp_vec, zi, theta, n_steps = 100)
resultado
# Calcular alpha e custos fisiológicos
alpha_vals <- alpha_fun(theta, zi)
cf_vals <- Cf(alpha_vals, Cp_vec)
# Colocar no formato longo para ggplot
alpha_df <- as.data.frame(alpha_vals) %>%
mutate(t = 1:nrow(.)) %>%
pivot_longer(cols = starts_with("sp"), names_to = "especie", values_to = "alpha")
cf_df <- as.data.frame(cf_vals) %>%
mutate(t = 1:nrow(.)) %>%
pivot_longer(cols = starts_with("sp"), names_to = "especie", values_to = "cf")
# Plot do alpha
p_alpha <- ggplot(alpha_df, aes(x = t, y = alpha, color = especie)) +
geom_line(size = 1) +
theme_minimal() +
labs(title = expression(alpha ~ "(theta - z[i])"),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
# Plot do alpha
p_alpha <- ggplot(alpha_df, aes(x = t, y = alpha, color = especie)) +
geom_line(linewidith = 1) +
theme_minimal() +
labs(title = expression(alpha ~ "(theta - z[i])"),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
# Plot do alpha
p_alpha <- ggplot(alpha_df, aes(x = t, y = alpha, color = especie)) +
geom_line(linewidth = 1) +
theme_minimal() +
labs(title = expression(alpha ~ "(theta - z[i])"),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
# Plot do custo fisiológico
p_cf <- ggplot(cf_df, aes(x = t, y = cf, color = especie)) +
geom_line(size = 1) +
theme_minimal() +
labs(title = "Custo fisiológico Cf",
x = "Tempo (t)", y = "Cf") +
theme(legend.position = "none")
# Mostrar juntos
library(patchwork)
p_alpha / p_cf
theta
env <- data.frame(theta)
env
env <- env %>%
mutate(t = 1:nrow(.))
env
theme_minimal() +
labs(title = expression(alpha ~ "(theta - z[i])"),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
# Plot do alpha
p_alpha <- ggplot(alpha_df, aes(x = t, y = alpha, color = especie)) +
geom_line(linewidth = 1) +
geom_line(aes(y = theta))+
theme_minimal() +
labs(title = expression(alpha ~ "(theta - z[i])"),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
p_alpha / p_cf
# Plot do alpha
p_alpha <- ggplot(alpha_df, aes(x = t, y = alpha, color = especie)) +
geom_line(linewidth = 1) +
geom_line(env, aes(y = theta))+
theme_minimal() +
labs(title = expression(alpha ~ "(theta - z[i])"),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
# Plot do alpha
p_alpha <- ggplot(alpha_df, aes(x = t, y = alpha, color = especie)) +
geom_line(linewidth = 1) +
geom_line(env, aes(y = theta, x = t, color "black"black))+
# Plot do alpha
p_alpha <- ggplot(alpha_df, aes(x = t, y = alpha, color = especie)) +
geom_line(linewidth = 1) +
geom_line(env, aes(y = theta, x = t, color "black"))+
# Plot do alpha
p_alpha <- ggplot(alpha_df, aes(x = t, y = alpha, color = especie)) +
geom_line(linewidth = 1) +
geom_line(env, aes(y = theta, x = t, color = "black"))+
theme_minimal() +
labs(title = expression(alpha ~ "(theta - z[i])"),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
# Plot do alpha
p_alpha <- ggplot() +
geom_line(alpha_df, aes(x = t, y = alpha, color = especie),linewidth = 1) +
geom_line(env, aes(y = theta, x = t, color = "black"))+
theme_minimal() +
labs(title = expression(alpha ~ "(theta - z[i])"),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
# Plot do alpha
p_alpha <- ggplot(alpha_df, aes(x = t, y = alpha, color = especie)) +
geom_line(linewidth = 1) +
geom_line(data = env, aes(y = theta, x = t, color = "black"))+
theme_minimal() +
labs(title = expression(alpha ~ "(theta - z[i])"),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
p_alpha
p_alpha <- ggplot() +
geom_line(data = env, aes(y = theta, x = t, color = "black"))+
theme_minimal() +
labs(title = expression(alpha ~ "(theta - z[i])"),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
p_alpha
env <- ggplot() +
geom_line(data = env, aes(y = theta, x = t, color = "black"))+
theme_classic() +
labs(title = expression(alpha ~ "(theta - z[i])"),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
env
# Plot do alpha
p_alpha <- ggplot(alpha_df, aes(x = t, y = alpha, color = especie)) +
geom_line(linewidth = 1) +
theme_minimal() +
labs(title = expression(alpha ~ "(theta - z[i])"),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
p_alpha
env /p_alpha / p_cf
# Plot do custo fisiológico
p_cf <- ggplot(cf_df, aes(x = t, y = cf, color = especie)) +
geom_line(size = 1) +
theme_classic() +
labs(title = "Custo fisiológico Cf",
x = "Tempo (t)", y = "Cf") +
theme(legend.position = "none")
env <- ggplot() +
geom_line(data = env, aes(y = theta, x = t, color = "black"))+
theme_classic() +
labs(title = expression(alpha ~ "(theta - z[i])"),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
env <- ggplot() +
geom_line(data = env, aes(y = theta, x = t, color = "black"))+
theme_classic() +
labs(title = expression(alpha ~ "(theta - z[i])"),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
# Plot do alpha
p_alpha <- ggplot(alpha_df, aes(x = t, y = alpha, color = especie)) +
geom_line(linewidth = 1) +
theme_classic() +
labs(title = expression(alpha ~ "(theta - z[i])"),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
# Plot do custo fisiológico
p_cf <- ggplot(cf_df, aes(x = t, y = cf, color = especie)) +
geom_line(size = 1) +
theme_classic() +
labs(title = "Custo fisiológico Cf",
x = "Tempo (t)", y = "Cf") +
theme(legend.position = "none")
env <- ggplot() +
geom_line(data = env, aes(y = theta, x = t, color = "black"))+
theme_classic() +
labs(title = expression(alpha ~ "(theta - z[i])"),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
env <- data.frame(theta)
env <- env %>%
mutate(t = 1:nrow(.))
env <- ggplot() +
geom_line(data = env, aes(y = theta, x = t, color = "black"))+
theme_classic() +
labs(title = expression(alpha ~ "(theta - z[i])"),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
# Mostrar juntos
library(patchwork)
env /p_alpha / p_cf
env <- ggplot() +
geom_line(data = env, aes(y = theta, x = t, color = "black"))+
theme_classic() +
labs(title = expression((Theta)),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
env <- ggplot(data = env, aes(y = theta, x = t, color = "black")) +
geom_line(linewidth = 1)+
theme_classic() +
labs(title = expression((Theta)),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
env <- data.frame(theta)
env <- env %>%
mutate(t = 1:nrow(.))
env <- ggplot(data = env, aes(y = theta, x = t, color = "black")) +
geom_line(linewidth = 1)+
theme_classic() +
labs(title = expression((Theta)),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
# Mostrar juntos
library(patchwork)
env /p_alpha / p_cf
env <- ggplot(data = env, aes(y = theta, x = t, color = "black")) +
geom_line(linewidth = 1)+
theme_classic() +
labs(title = expression(Theta),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
env /p_alpha / p_cf
env <- ggplot(data = env, aes(y = theta, x = t)) +
geom_line(linewidth = 1)+
theme_classic() +
labs(title = expression(Theta),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
env <- data.frame(theta)
env <- env %>%
mutate(t = 1:nrow(.))
env <- ggplot(data = env, aes(y = theta, x = t)) +
geom_line(linewidth = 1)+
theme_classic() +
labs(title = expression(Theta),
x = "Tempo (t)", y = expression(alpha)) +
theme(legend.position = "none")
env /p_alpha / p_cf
env <- ggplot(data = env, aes(y = theta, x = t)) +
geom_line(linewidth = 1)+
theme_classic() +
labs(title = expression(theta),
x = "Tempo (t)", y = expression(theta)) +
theme(legend.position = "none")
env <- env %>%
mutate(t = 1:nrow(.))
env <- data.frame(theta)
env <- env %>%
mutate(t = 1:nrow(.))
env <- ggplot(data = env, aes(y = theta, x = t)) +
geom_line(linewidth = 1)+
theme_classic() +
labs(title = expression(theta),
x = "Tempo (t)", y = expression(theta)) +
theme(legend.position = "none")
envir <- ggplot(data = env, aes(y = theta, x = t)) +
geom_line(linewidth = 1)+
theme_classic() +
labs(title = expression(theta),
x = "Tempo (t)", y = expression(theta)) +
theme(legend.position = "none")
ecosystem <- function(object, P_matrix) {
# Species History states
state_history <- object$state_history #bringing the simulation time steps from the iteration of costs-benefits
#this one has t in rows and species status in colums
n <- nrow(state_history)
# Calculate services in each time t: multiply the transpose P by state_history
services_history <- state_history %*% t(P_matrix) #P needs the ecosystem services on the rows
# Selecting the first and last time steps
E_initial <- services_history[1, ]
E_final   <- services_history[n, ]
# Diference of ecosystem services between initial and final at time steps
delta_E <- E_initial - E_final
return(list(
services_history = services_history, # All time steps
E_initial = E_initial,
E_final = E_final,
delta_E = delta_E
))
}
#Implementation exemple
set.seed(123)
#exemple matrix of the size of the iterations time steps and species number in the main model
P_matrix <- matrix(runif(nrow(resultado$state_history)*ncol(resultado$state_history), 0, 1), nrow = 3)
# Simulating dinamics
simulation <- function(A, B_vec, Ce_vec, Cp_vec, zi, theta, n_steps = 100){
n <- nrow(A)
t_max <- length(theta)
# Alpha and physiological costs pre-calculated for all times t
alpha <- alpha_fun(theta, zi)
physio_all <- Cf(alpha, Cp_vec)
# Inicial state: all species present
state <- rep(1, n)
# Matrix to store history of states (states changes trhough time)
state_history <- matrix(NA, nrow = min(n_steps, t_max), ncol = n)
colnames(state_history) <- paste0("sp", 1:n)
state_history[1, ] <- state
for (t in 2:min(n_steps, t_max)) {
# Filtering A Matriz for just active species (1)
active_species <- which(state == 1)
# Actualizating costs and benefit matrices (C_mat & B_mat) considering just existing interactions  with active species
B_mat <- matrix(0, n, n)
C_mat <- matrix(0, n, n)
for (i in active_species) {
partners <- which(A[i, ] == 1 & state == 1)
B_mat[i, partners] <- B_vec[partners]
C_mat[i, partners] <- Ce_vec[partners]
}
# Especialization: benefits saturation
sum_b <- rowSums(B_mat)
B_max <- max(B_vec)
B_final <- ifelse(sum_b > B_max, B_max, sum_b)
# Calculating netbenefits NB: benefits - (ecological costs + B4hysiological costs)
C_total <- rowSums(C_mat) + physio_all[t, ]
nb <- B_final - C_total
# State actualization: species turns active if NB > 0
new_state <- ifelse(nb > 0, 1, 0)
# **Store the hystory of species states on the matrix**
state_history[t, ] <- new_state
# Stop itaration condition: stable state when species stop to change state
if (all(new_state == state)) break
state <- new_state
}
# FInal active interactions
A_active <- A * (state %o% state) #outer product of states in A_ij
# Final Metrics
prop_active_species <- sum(state) / n
prop_remaining_interactions <- sum(A_active) / sum(A)
return(list(
state_history = state_history[1:t, , drop = FALSE],
final_state = state,
prop_active_species = prop_active_species,
prop_remaining_interactions = prop_remaining_interactions
))
}
#----------------------
# Simulation example
set.seed(123)
A <- network(50, 0.3)
diag(A) <- 0
n <- nrow(A)
B_vec <- rlnorm(n, 10, 5)
Ce_vec <- rlnorm(n, 10, 5)
Cp_vec <- rlnorm(n, 1.5, 1)
zi <- rnorm(n, 0, 1)
theta <- environment(0.01, 0.1, 0.01, 0.1, t_max = 100)
resultado <- simulation(A, B_vec, Ce_vec, Cp_vec, zi, theta, n_steps = 100)
resultado
ecosystem <- function(object, P_matrix) {
# Species History states
state_history <- object$state_history #bringing the simulation time steps from the iteration of costs-benefits
#this one has t in rows and species status in colums
n <- nrow(state_history)
# Calculate services in each time t: multiply the transpose P by state_history
services_history <- state_history %*% t(P_matrix) #P needs the ecosystem services on the rows
# Selecting the first and last time steps
E_initial <- services_history[1, ]
E_final   <- services_history[n, ]
# Diference of ecosystem services between initial and final at time steps
delta_E <- E_initial - E_final
return(list(
services_history = services_history, # All time steps
E_initial = E_initial,
E_final = E_final,
delta_E = delta_E
))
}
#exemple matrix of the size of the iterations time steps and species number in the main model
P_matrix <- matrix(runif(nrow(resultado$state_history)*ncol(resultado$state_history), 0, 1), nrow = 3)
#exemple matrix of the size of the iterations time steps and species number in the main model
P_matrix <- matrix(runif(nrow(resultado$state_history)*ncol(resultado$state_history), 0, 1), nrow = 3)
#exemple matrix of the size of the iterations time steps and species number in the main model
P_matrix <- matrix(5*50, 0, 1), nrow = 5)
#exemple matrix of the size of the iterations time steps and species number in the main model
P_matrix <- matrix(runif(5*50, 0, 1), nrow = 5)
P_matrix
# Calcular serviços ecossistêmicos
services <- ecosystem(resultado, P_matrix) #caling the above functions
# Looking at the changes of ecosystem services along the time
print(services$services_history)
# the diference at the first to the last time steps
print(servicos$delta_E)
# the diference at the first to the last time steps
print(services$delta_E)
